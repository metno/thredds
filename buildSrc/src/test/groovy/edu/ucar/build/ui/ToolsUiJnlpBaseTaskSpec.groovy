package edu.ucar.build.ui

import groovy.util.slurpersupport.GPathResult
import groovy.xml.XmlUtil
import org.gradle.api.JavaVersion
import org.gradle.testkit.runner.GradleRunner
import org.gradle.testkit.runner.TaskOutcome
import org.gradle.testkit.runner.internal.PluginUnderTestMetadataReading
import org.junit.Rule
import org.junit.rules.TemporaryFolder
import org.xmlunit.builder.DiffBuilder
import org.xmlunit.builder.Input
import org.xmlunit.diff.Diff
import spock.lang.Specification

/**
 * Tests ToolsUiJnlpBaseTask.
 *
 * @author cwardgar
 * @since 2017-04-05
 */
class ToolsUiJnlpBaseTaskSpec extends Specification {
    @Rule TemporaryFolder tempFolder
    
    // The name of the test resource we'll be working with. It's located in src/test/resources/edu/ucar/ui/
    String resourceName = 'netCDFtools.jnlp'
    
    def "test writeNetCDFtools without application argument"() {
        setup: 'create a temporary file that will be deleted at the end of the test'
        File tempFile = tempFolder.newFile('netCDFtools.jnlp')
        
        and: 'create a writer without application argument'
        ToolsUiJnlpBaseTask.Writer writer = new ToolsUiJnlpBaseTask.Writer()
        writer.with {
            applicationVersion = '1.5'
            targetCompatibility = JavaVersion.VERSION_1_7
            extensionJnlpFileName = "netCDFtoolsExtraJars.jnlp"
            outputFile = tempFile
        }
        
        and: 'write JNLP to disk'
        writer.write()
        
        // This statement causes STDERR warnings.
        when: 'compare expected XML (modified test resource) with just-written file, ignoring comments and whitespace'
        Diff diff = DiffBuilder.compare(Input.fromStream(getClass().getResourceAsStream(resourceName)))
                               .withTest(Input.fromFile(tempFile))
                               .ignoreComments().normalizeWhitespace().build()

        then: 'there will be no difference between the two'
        !diff.hasDifferences()
        
        cleanup: "delete the output file; we'll be reusing the path in another test"
        tempFile.delete()
    }
    
    def "test writeNetCDFtools with application argument"() {
        setup: 'create a temporary file that will be deleted at the end of the test'
        File tempFile = tempFolder.newFile('netCDFtools.jnlp')
    
        and: 'create a writer with application argument'
        ToolsUiJnlpBaseTask.Writer writer = new ToolsUiJnlpBaseTask.Writer()
        writer.with {
            applicationVersion = '1.5'
            targetCompatibility = JavaVersion.VERSION_1_7
            extensionJnlpFileName = "netCDFtoolsExtraJars.jnlp"
            applicationArgument = '{catalog}#{dataset}'
            outputFile = tempFile
        }
    
        and: 'write JNLP to disk'
        writer.write()
        
        and: 'open test resource and modify it to add application argument'
        GPathResult jnlp = new XmlSlurper().parse(getClass().getResourceAsStream(resourceName))
        // Add "<argument>{catalog}#{dataset}</argument>" to the "application-desc" node
        jnlp.'application-desc'.appendNode {
            argument '{catalog}#{dataset}'
        }
        
        when: 'compare expected XML (modified test resource) with just-written file, ignoring comments and whitespace'
        Diff diff = DiffBuilder.compare(Input.fromString(XmlUtil.serialize(jnlp)))
                               .withTest(Input.fromFile(tempFile))
                               .ignoreComments().normalizeWhitespace().build()

        then: 'there will be no difference between the two'
        !diff.hasDifferences()
    
        cleanup: "delete the output file; we'll be reusing the path in another test"
        tempFile.delete()
    }
    
    // This reads from a file generated by the java-gradle-plugin.
    // It is intended for use with GradleRunner.withPluginClasspath(), but that doesn't quite work for us because
    // we're not testing a plugin here; only the code in :buildSrc. So instead, we're going to feed those files
    // into the test build's buildscript classpath.
    List<File> buildSrcClasspath = PluginUnderTestMetadataReading.readImplementationClasspath()
    
    def "test ToolsUiJnlpBaseTask in Gradle build"() {
        setup: "variables"
        String taskName = 'toolsUiJnlpBase'
        File outputFile = tempFolder.newFile('testNetCDFtoolsWithArg.jnlp')
        
        and: "declare initial content of build file"
        String buildFileContent = """
            buildscript {
                dependencies {
                    // Need this in order to resolve ToolsUiJnlpBaseTask.
                    String buildSrcClasspathAsCsvString = '${buildSrcClasspath.join(',').replace('\\\\', '/')}'
                    classpath files(buildSrcClasspathAsCsvString.split(','))
                }
            }
            
            apply plugin: 'java'
            targetCompatibility = '1.7'
            
            task $taskName(type: edu.ucar.build.ui.ToolsUiJnlpBaseTask) {
                applicationArgument = '{catalog}#{dataset}'
                outputFile = file('${outputFile.name}')
            }
        """
        
        and: "create a temporary build file containing that content"
        File buildFile = tempFolder.newFile('build.gradle')
        buildFile.text = buildFileContent
    
        and: "setup a GradleRunner that will execute '$taskName'"
        GradleRunner gradleRunner = GradleRunner.create().withProjectDir(tempFolder.root).withArguments(":$taskName")
        
        expect: "if we execute the task, it will succeed"
        gradleRunner.build().task(":$taskName")?.outcome == TaskOutcome.SUCCESS
        
        and: "if we re-execute the task without changing anything, it'll be UP-TO-DATE"
        gradleRunner.build().task(":$taskName")?.outcome == TaskOutcome.UP_TO_DATE
        
        when: "we change 'project.targetCompatibility', " +
              "which is used as the default value of one of the task's input properties"
        buildFile.text = buildFileContent.replace("targetCompatibility = '1.7'", "targetCompatibility = '1.8'")
        
        then: "test will not be UP-TO-DATE and will have to run again"
        gradleRunner.build().task(":$taskName")?.outcome == TaskOutcome.SUCCESS
    }
}
