package edu.ucar.build.ui

import groovy.xml.MarkupBuilder
import org.gradle.api.DefaultTask
import org.gradle.api.artifacts.Configuration
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.OutputFile
import org.gradle.api.tasks.TaskAction

/**
 * Writes the auxiliary webstart (JNLP) file for ToolsUI. The file is useless by itself; it is meant to
 * be imported by the webstart file generated by {@link ToolsUiJnlpBaseTask}.
 *
 * @author cwardgar
 * @since 2017-04-05
 */
class ToolsUiJnlpExtensionTask extends DefaultTask {
    /**
     * The value for {@code /jnlp/@version}.
     * Will be assigned a default of {@code 'project.version'}.
     */
    @Input
    String applicationVersion = project.version
    
    /**
     * The value for {@code /jnlp/resources/jar/@href}.
     * Will be assigned a default of {@code project.jar.archiveName}.
     * That value will only be available if the Java plugin is applied to the project.
     */
    @Input
    String applicationJarName = project.tasks.findByPath('jar')?.archiveName
    
    /**
     * For each dependency in this configuration, a {@code /jnlp/resources/jar} element will be created, and its
     * {@code href} attribute will be the dependency's name.
     * Will be assigned a default of {@code project.configurations.runtime}.
     * That value will only be available if the Java plugin is applied to the project.
     */
    @Input
    Configuration dependenciesConfig = project.configurations.findByName('runtime')
    
    /** The file to write the JNLP to. */
    @OutputFile
    File outputFile
    
    ToolsUiJnlpExtensionTask() {
        group = 'Release'
        description = "Writes the auxiliary webstart (JNLP) file for ToolsUI."
    }
    
    @TaskAction
    def write() {
        ToolsUiJnlpExtensionTask.Writer writer = new ToolsUiJnlpExtensionTask.Writer(
                applicationVersion: applicationVersion,
                applicationJarName: applicationJarName,
                dependenciesConfig: dependenciesConfig,
                outputFile: outputFile
        )
        writer.write()
    }
    
    // Separate implementation to enable easier unit testing.
    static class Writer {
        String codebase = 'http://www.unidata.ucar.edu/software/thredds/current/netcdf-java/webstart'
        
        String applicationVersion
        String applicationJarName
        Configuration dependenciesConfig
    
        File outputFile
    
        def write() {
            outputFile.parentFile.mkdirs()
            
            new BufferedWriter(new FileWriter(outputFile)).withCloseable {
                def xml = new MarkupBuilder(it)
            
                xml.mkp.xmlDeclaration(version: "1.0", encoding: "utf-8")
            
                xml.jnlp(spec: '7.0', codebase: codebase, href: outputFile.name, version: applicationVersion) {
                    'component-desc'()
                
                    resources() {
                        jar(href: applicationJarName, main: 'true', download: 'eager')
                    
                        dependenciesConfig.resolve().each {
                            jar(href: it.name, download: 'lazy')
                        }
                    }
                }
            }
        }
    }
}
