import com.google.common.collect.Iterables
import edu.ucar.build.ui.ToolsUiJnlpBaseTask
import edu.ucar.build.ui.ToolsUiJnlpExtensionTask

import java.util.jar.JarEntry
import java.util.jar.JarFile
import java.util.jar.JarOutputStream
import org.codehaus.groovy.runtime.NioGroovyMethods

description = "Provides a graphical interface to much of the functionality in the CDM library."
ext.title = "ToolsUI"

dependencies {
    compile project(":cdm")
    compile project(":clcommon")
    compile project(":bufr")
    compile project(":grib")
    compile project(":netcdf4")
    compile project(":opendap")
    compile project(":waterml")
    compile project(":httpservices")
    
    runtime project(":visadCdm")  // For Gempak IOSPs.

    compile libraries["ehcache-core"]
    compile libraries["jdom2"]
    compile libraries["spring-context"]
    compile libraries["jcommon"]
    compile libraries["jfreechart"]
    compile libraries["jgoodies-forms"]
    compile libraries["httpclient"]
    compile libraries["httpcore"]
    compile libraries["bounce"]
    compile libraries["imgscalr-lib"]
    compile libraries["commons-lang3"]
    compile libraries["52n-oxf-xmlbeans"]
    compile libraries["guava"]

    compile libraries["slf4j-api"]
    runtime libraries["slf4j-jdk14"]
}

//////////////////////////////////////////////////////////

jar {
    manifest {
        attributes 'Main-Class': 'ucar.nc2.ui.ToolsUI',
                // These are security attributes, necessary for Web Start: http://goo.gl/Ob6Wid
                // ui.jar is the first jar in the JNLP, so I think its manifest is the only one that needs these.
                'Application-Name': project.title,
                'Codebase': 'http://www.unidata.ucar.edu/software/thredds/',
                'Permissions': 'all-permissions',
                'Trusted-Only': 'true',

                // MANIFEST.MF is an @Input to the Jar task, so when it changes, Jar will be considered out-of-date.
                // Here, we're writing an attribute to MANIFEST.MF. When its value changes, MANIFEST.MF will change,
                // and Jar will be considered out-of-date.
                // So, indirectly, we've made the "runtime" configuration an @Input to the Jar task.
                'Class-Path': configurations.runtime.collect { it.name }.join(' ')
    }

    // I used to create META-INF/INDEX.LIST here to speedup Web Start loading, but it turns out that Spring and
    // INDEX.LIST don't get along: https://jira.spring.io/browse/SPR-5705
    // As a result, I don't think that Web Start is loading jars lazily as I intended.
    // LOOK: Does that make the 'Class-Path' manifest attribute and 'download="lazy"' JNLP attributes pointless?
}

ext {
    toolsUIjar = 'toolsUI-' + version + '.jar'
    webstartWorkingDir = "build/signed"
    if (project.hasProperty("webdir")) {
        webstartDir = new File(webdir, "webstart")
    }

    depsToRejar = ['xmlbeans-2.6.0.jar', 'Saxon-HE-9.4.0.6.jar']
}

task toolsUiJnlpExtension(type: ToolsUiJnlpExtensionTask) {
    outputFile = file("$buildDir/webstart/netCDFtoolsExtraJars.jnlp")
}

task toolsUiJnlpBase(type: ToolsUiJnlpBaseTask) {
    // Creates an inferred task dependency on toolsUiJnlpExtension.
    // See https://docs.gradle.org/current/userguide/more_about_tasks.html#sec:task_input_output_side_effects
    File toolsUiJnlpExtensionFile = Iterables.getOnlyElement(tasks.toolsUiJnlpExtension.outputs.files.files)
    
    extensionJnlpFileName = toolsUiJnlpExtensionFile.name
    outputFile = file("$buildDir/webstart/netCDFtools.jnlp")
}

/*
 * 2017-04-12 note: As of java version "1.8.0_121", I cannot FOR THE LIFE OF ME figure out how to run webstart locally.
 * It used to work with earlier versions of JRE 8, but now I always get an "Application Blocked by Java Security"
 * error dialog. A lot of solutions on the web recommend adding entries to the Java Security Exception Site List
 * (e.g. http://mindprod.com/jgloss/exceptionsitelist.html#LOCALHOST), but nothing works. I even tried hosting the
 * files on a local HTTP server, so that I could reference them with http://localhost URLs. No dice. So, for each
 * release, we just have to make sure that Web Start works once the files are uploaded to the Unidata server.
 */
/* following properties should be in gradle.properties:
   keystore=name of keystore file
   keystoreAlias=idv
   keystorePassword=password of keystore file
   webdir:parent of conan content directory
   ftpdir:ftp directory
 */
// TODO: Use the Sync task for this.
task releaseWebstart(group: 'Release', dependsOn: ['jar', 'toolsUiJnlpExtension', 'toolsUiJnlpBase']) << {
    if (project.hasProperty("webdir") && project.hasProperty("keystore")
            && project.hasProperty("keystoreAlias") && project.hasProperty("keystorePassword")) {
        ant.delete(dir: webstartWorkingDir)
        ant.mkdir(dir: webstartWorkingDir)

        copy {
            println "copyJnlp"
            from Iterables.getOnlyElement(tasks.toolsUiJnlpExtension.outputs.files.files)
            from Iterables.getOnlyElement(tasks.toolsUiJnlpBase.outputs.files.files)
            into webstartWorkingDir
        }

        println "signjar:"
        println "\twebdir = $webdir"
        println "\tkeystore = $keystore"
        println "\tkeystoreAlias = $keystoreAlias"
        println "\tkeystorePassword = $keystorePassword"

        ant.signjar(jar: tasks.jar.archivePath, destDir: webstartWorkingDir, alias: keystoreAlias,
                keystore: keystore, storepass: keystorePassword, preservelastmodified: true, verbose: false)

        for (file in configurations.runtime.resolve()) {
            if (depsToRejar.contains(file.name)) {
                println "$file contains duplicate entries or old signature files. Rejarring."

                File rejarredFile = new File(temporaryDir, file.name)
                rejar file, rejarredFile
                file = rejarredFile
            }
            
            println "Signing $file"
            ant.signjar(jar: file, destDir: webstartWorkingDir, alias: keystoreAlias,
                    keystore: keystore, storepass: keystorePassword, preservelastmodified: true, verbose: false)
        }

        ant.delete(dir: webstartDir)
        ant.mkdir(dir: webstartDir)

        copy {
            println "copy2web"
            from(webstartWorkingDir)
            into webstartDir
        }
    } else {
        println "Several properties (\"webdir\", \"keystore\", \"keystoreAlias\", \"keystorePassword\" )\n"
        +"must be defined to run \"releaseWebstart\" task."
    }
}

///////////////////////////////////////////////////////

javadoc {
    title = 'All javadoc for netcdf-java version ' + version
    source = fileTree(dir: '../bufr/src/main/java', include: '**/*.java')
    source = source.plus(fileTree(dir: '../cdm/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../clcommon/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../grib/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../httpservices/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../netcdf4/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../opendap/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../udunits/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../ui/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../visad/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../waterml/src/main/java', include: '**/*.java'))

    source = source.plus(fileTree(dir: '../dap4/d4core/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../dap4/d4shared/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../dap4/d4cdmshared/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../dap4/d4cdmclient/src/main/java', include: '**/*.java'))
}

task releaseDocs(dependsOn: javadoc, group: 'Release') << {
    if (project.hasProperty("webdir")) {
        String releaseDir = new File(webdir, "javadocAll").absolutePath

        ant.delete(dir: releaseDir)
        ant.mkdir(dir: releaseDir)

        copy {
            println "copyDocs to " + releaseDir
            from("build/docs/javadoc")
            into releaseDir
        }
    } else {
        println "Property \"webdir\" must be defined to run \"releaseDocs\" task."
    }
}

///////////////////////////////////////////////////////

/**
 * Creates a new JAR file at {@code destJarFile} containing the contents of {@code origJarFile}. Any duplicate
 * entries in {@code origJarFile} will be excluded from {@code destJarFile}. Also, any old signature files
 * (i.e. META-INF/*.DSA, META-INF/*.SF, META-INF/*.RSA) will be excluded.
 *
 * @param origJarFile the original JAR file.
 * @param destJarFile the destination JAR file.
 */
def rejar(File origJarFile, File destJarFile) {
    JarFile origJar = new JarFile(origJarFile);

    NioGroovyMethods.withCloseable(origJar) {
        JarOutputStream jarOutStream = new JarOutputStream(
                new BufferedOutputStream(new FileOutputStream(destJarFile)))

        NioGroovyMethods.withCloseable(jarOutStream) {
            java.util.regex.Pattern signatureFilePattern = ~/META-INF\/.+\.(DSA|SF|RSA)/
            Set<String> entriesWritten = new HashSet<>();

            for (JarEntry origJarEntry : origJar.entries()) {
                if (origJarEntry.name =~ signatureFilePattern) {
                    logger.debug "Excluding signature file: $origJarEntry.name"
                } else if (!entriesWritten.add(origJarEntry.getName())) {
                    logger.debug "Skipping duplicate entry: $origJarEntry.name"
                } else {
                    writeEntry origJar, origJarEntry, jarOutStream
                }
            }
        }
    }
}

def writeEntry(JarFile jar, JarEntry jarEntry, JarOutputStream jarOutStream) {
    try {
        jarOutStream.putNextEntry(jarEntry);
        InputStream jarEntryInputStream = jar.getInputStream(jarEntry)

        NioGroovyMethods.withCloseable(jarEntryInputStream) {
            byte[] buffer = new byte[8192];
            int bytesRead;

            while ((bytesRead = jarEntryInputStream.read(buffer)) != -1) {
                jarOutStream.write(buffer, 0, bytesRead)
            }
        }
    } finally {
        jarOutStream.closeEntry();
    }
}
